import os
import tkinter as tkinter
from PIL import Image, ImageTk
import customtkinter as ctk

class Exploit(ctk.CTkFrame):
    
    def __init__(self, master):
        super().__init__(master)
        
      
        self.winfo_height().as_integer_ratio
        
        # main top 
        self.main_top = ctk.CTkFrame(self,height=180,width=master.winfo_width(),fg_color='#2b2b2b')
        self.main_top.pack( fill=tkinter.X, expand=True, padx=5)
        #self.main_container.pack(fill=tkinter.BOTH, expand=True, padx=10, pady=10)
        self.main_top.grid_columnconfigure((2), weight=2)
        self.main_top.configure(border_width=2)
        self.main_top.configure(border_color='white')
        # Set the relief style to 'ridge'
        #self.main_top.configure(relief="ridge")
        target = "https://testmalware.com";
        self.scan_result_label = ctk.CTkLabel(self.main_top, text="EXPLOIT TARGET: " , font=ctk.CTkFont(size=18, weight="bold"),text_color='White')
        self.scan_result_label.grid(row=0, pady=10, padx=25, column=0)
        self.scan_target_label = ctk.CTkLabel(self.main_top, text=target, font=ctk.CTkFont(size=20, weight="bold"),text_color='red')
        self.scan_target_label.grid(row=0, pady=10, padx=(25,5), column=1)
        button_back_to_scan = ctk.CTkButton(self.main_top, text="Refresh exploit", text_color="black",  fg_color="red", font=('Arial',15, 'bold'),
                       corner_radius=10,
                       command=self.refresh_exploit)
        button_back_to_scan.grid(column=3, row=0,  padx=20, pady=10,)
       
        #------------------------------------------------------
        #scan_search
        #Dropdown menu + search bar + button send
        self.main_entry = ctk.CTkFrame(self,height=180,width=master.winfo_width(),fg_color='#2b2b2b')
        self.main_entry.pack( fill=tkinter.X, expand=True, padx=5)
        self.combobox_1 = ctk.CTkComboBox(self.main_entry,
                                                    values=["GET", "POST", "PUT"])
        self.combobox_1.grid(row=0, column=0, padx=20, pady=(10, 10))
        self.target_entry = ctk.CTkEntry(self.main_entry, width=1100, placeholder_text="Enter Vunerabilities URL",)
        self.target_entry.grid(row=0, column=1,sticky="nw",pady=(15, 15))
        current_path = os.path.dirname(os.path.realpath(__file__))
        self.bt_search = ctk.CTkButton(self.main_entry,width=80,height=25,anchor="w", image=ctk.CTkImage(Image.open(current_path + "/assets/icons/send.png"),size=(15, 15)), text=" Send", text_color='white',fg_color='red')
        self.bt_search.grid(row=0, column=2, padx=10, pady=10)
        
        
        
        
        self.main_center = ctk.CTkFrame(self,height=600, width=master.winfo_width(), fg_color='#2b2b2b')
        self.main_center.pack( fill=tkinter.X, expand=True, padx=5)
        self.main_center.grid_columnconfigure(0, weight=1)
        self.tabview = ctk.CTkTabview(self.main_center, height=400, width=master.winfo_width(),segmented_button_selected_hover_color="red", segmented_button_selected_color="red", border_color="white", border_width=1)
        self.tabview.grid(row=0, column=0, sticky="nw")
        self.tabview.add("Params")
        self.tabview.add("Headers")
        self.tabview.add("Body")
        self.tabview.add("Settings")
        self.tabview.tab("Params").grid_columnconfigure(0, weight=1)  # configure grid of individual tabs
        self.tabview.tab("Headers").grid_columnconfigure(0, weight=1)
        
        # Tab Params
        self.query_params_label = ctk.CTkLabel(self.tabview.tab("Params"), text="Query Params" , font=ctk.CTkFont(size=20, weight="bold"),text_color='White')
        self.query_params_label.grid(row=0, pady=10, column=0,sticky="nw")
        
        self.query_params_table = ctk.CTkFrame(self.tabview.tab("Params"), height = 40,width=1350)
        self.query_params_table.grid(row =1, column =0, sticky="nw");
        #self.main_center.grid_rowconfigure((), weight=2)
       
        self.header = ctk.CTkFrame(self.query_params_table, height = 40,width=1350, fg_color='gray')
        self.header.grid(row = 0, column =0, sticky="nw");
        self.header.configure(border_width=1)
        self.header.configure(border_color='red')
        self.header.grid_columnconfigure((0,1,2,3,4), weight=1)
        
        #header detail
        #id label
        self.id_label_frame = ctk.CTkFrame(self.header,width=50, fg_color='gray', corner_radius=0)
        self.id_label_frame.grid(row=0, column=0,sticky="nw")
        self.id_label_frame.configure(border_width=1)
        self.id_label_frame.configure(border_color='red')
        self.id_label = ctk.CTkLabel(self.id_label_frame, text="Id", font=ctk.CTkFont(size=15, weight="bold"),text_color='White',fg_color='gray', width=50)
        self.id_label.grid(row=0, column=0, pady=10, padx=5,sticky="nw")
        #sev label
        self.sev_label_frame = ctk.CTkFrame(self.header,width=350, fg_color='gray', corner_radius=0)
        self.sev_label_frame.grid(row=0, column=1,sticky="nw")
        self.sev_label_frame.configure(border_width=1)
        self.sev_label_frame.configure(border_color='red')
        self.sev_label = ctk.CTkLabel(self.sev_label_frame, text="Key", font=ctk.CTkFont(size=15, weight="bold"),text_color='White',fg_color='gray', width=350)
        self.sev_label.grid(row=0, column=1, pady=10, padx=5,sticky="nw")
        
        #name label
        self.name_label_frame = ctk.CTkFrame(self.header,width=500, fg_color='gray', corner_radius=0)
        self.name_label_frame.grid(row=0, column=2,sticky="nw")
        self.name_label_frame.configure(border_width=1)
        self.name_label_frame.configure(border_color='red')
        self.name_label = ctk.CTkLabel(self.name_label_frame, text="Value", font=ctk.CTkFont(size=15, weight="bold"),text_color='White',fg_color='gray', width=500)
        self.name_label.grid(row=0, column=2, pady=10, padx=5,sticky="nw")
        
        #des label
        self.des_label_frame = ctk.CTkFrame(self.header,width=450, fg_color='gray', corner_radius=0)
        self.des_label_frame.grid(row=0, column=3,sticky="nw")
        self.des_label_frame.configure(border_width=1)
        self.des_label_frame.configure(border_color='red')
        self.des_label = ctk.CTkLabel(self.des_label_frame, text="Description", font=ctk.CTkFont(size=15, weight="bold"),text_color='White',fg_color='gray', width=450)
        self.des_label.grid(row=0, column=3, pady=10, padx=5,sticky="nw")
        
       
        options = ['Option 1', 'Option 2', 'Option 3', 'Option 4']
        for i in range(len(options)):
            self.data = ctk.CTkFrame(self.tabview.tab("Params"), height = 20, width=1350, fg_color='#d0caca')
            self.data.grid(row = i+2, column =0, sticky="nw", pady=4)
            self.data.configure(border_width=1)
            self.data.configure(border_color='white')
            
            self.radio_button_1 = ctk.CTkCheckBox(master=self.data,  text="",width=50)
            self.radio_button_1.grid(row=0, column=0, pady=10, padx=5, sticky="nw")
            #self.id_data = ctk.CTkLabel( self.data, text=str(i+1), font=ctk.CTkFont(size=15, weight="bold"),text_color='Black',fg_color='#d0caca', width=50)
            #self.id_data.grid(row=0, column=0, pady=10, padx=5,sticky="nw")
            self.sev_data = ctk.CTkEntry( self.data, placeholder_text="Key" + options[i], border_color="white", placeholder_text_color="red", font=ctk.CTkFont(size=15),text_color='red',fg_color='#d0caca', width=350)
            self.sev_data.grid(row=0, column=1, pady=5, padx=5,sticky="nw")
            self.name_data = ctk.CTkEntry( self.data, placeholder_text="Value" + options[i],border_color="white",  placeholder_text_color="red", font=ctk.CTkFont(size=15),text_color='red',fg_color='#d0caca', width=500)
            self.name_data.grid(row=0, column=2, pady=5, padx=5,sticky="nw")
            self.des_data = ctk.CTkEntry( self.data, placeholder_text="Description" + options[i],border_color="white",  placeholder_text_color="red", font=ctk.CTkFont(size=15),text_color='red',fg_color='#d0caca', width=450)
            self.des_data.grid(row=0, column=3, pady=5, padx=5,sticky="nw")
           
        
        
        
       
        self.label_tab_2 = ctk.CTkLabel(self.tabview.tab("Headers"), text="CTkLabel on Tab 2")
        self.label_tab_2.grid(row=0, column=0, padx=20, pady=20)
        
        self.main_bottom = ctk.CTkFrame(self,height=400, width=master.winfo_width(), fg_color="#2b2b2b")
        self.main_bottom.pack( fill=tkinter.X, expand=True, padx=5, pady=10)
        self.main_bottom.grid_columnconfigure((0), weight=1)
        self.main_bottom.configure(border_width=2)
        self.main_bottom.configure(border_color='white')
        self.exploit_result_label = ctk.CTkLabel(self.main_bottom, text="RESPONSE" , font=ctk.CTkFont(size=20, weight="bold"),text_color='White')
        self.exploit_result_label.grid(row=0, pady=5, padx=5, column = 0)
        self.exploit_info = ctk.CTkFrame(self.main_bottom,height=50, width=master.winfo_width(), fg_color="#2b2b2b")
        self.exploit_info.grid(row=1, pady=5, padx=5, column = 0)
        self.exploit_info.grid_columnconfigure((0), weight=1)
        
        status_code = "200 OK";
        time = "4.23";
        size="45"
        self.exploit_result_status_label = ctk.CTkLabel(self.exploit_info, text="Status: " , font=ctk.CTkFont(size=15, weight="bold"),text_color='White')
        self.exploit_result_status_label.grid(row=1, pady=5, padx=5, column = 1)
        self.exploit_result_data = ctk.CTkLabel(self.exploit_info, text=status_code , font=ctk.CTkFont(size=15, weight="bold"),text_color='green')
        self.exploit_result_data.grid(row=1, pady=5, padx=5, column = 2)
        self.exploit_time_label = ctk.CTkLabel(self.exploit_info, text="Time: " , font=ctk.CTkFont(size=15, weight="bold"),text_color='White')
        self.exploit_time_label.grid(row=1, pady=5, padx=5, column = 3)
        self.exploit_time_data = ctk.CTkLabel(self.exploit_info, text=time + " ms" , font=ctk.CTkFont(size=15, weight="bold"),text_color='red')
        self.exploit_time_data.grid(row=1, pady=5, padx=5, column = 4)
        self.exploit_size_label = ctk.CTkLabel(self.exploit_info, text="Size: " , font=ctk.CTkFont(size=15, weight="bold"),text_color='White')
        self.exploit_size_label.grid(row=1, pady=5, padx=5, column = 5)
        self.exploit_size_data = ctk.CTkLabel(self.exploit_info, text= size +  " kb"  , font=ctk.CTkFont(size=15, weight="bold"),text_color='red')
        self.exploit_size_data.grid(row=1, pady=5, padx=5, column = 6)
        exploit_save_button = ctk.CTkButton(self.exploit_info, text="Save as example",image=ctk.CTkImage(Image.open(current_path + "/assets/icons/home.png"),size=(30, 30)), text_color="black",  fg_color="red", font=('Arial',15, 'bold'),
                       corner_radius=10,
                       command=self.refresh_exploit)
        
        exploit_save_button.grid(column=7, row=1,  padx=20, pady=10,sticky="sw")
        
        self.response = ctk.CTkFrame(self.main_bottom,height=300, width=master.winfo_width(), fg_color="#2b2b2b")
        self.response.grid(row=2, pady=5, padx=5, column = 0)
        self.response.grid_columnconfigure((0), weight=1)
        self.tabview = ctk.CTkTabview(self.response, height=250, width=master.winfo_width(),segmented_button_selected_hover_color="red", segmented_button_selected_color="red", border_color="white", border_width=0.5)
        self.tabview.grid(row=0, column=0, sticky="nw")
        self.tabview.add("Body")
        self.tabview.add("Headers")
        
        self.textbox = ctk.CTkTextbox(self.tabview.tab("Body"), width=master.winfo_width(), height=200)
        self.textbox.grid(row=0, column=0, padx=(5, 0), pady=(5, 0), sticky="nsew", )
       
        self.textbox.insert("0.0",str({"userId":16,"username":"Back_dev","pin":"","phone":"0123456789","email":"huannhi1412@gmail.com","avatar":"https:\/\/secure.gravatar.com\/avatar\/822a3f6a35aa8f5fa3151368c5f6324c?s=96&d=mm&r=g","role":"administrator","nonce":"1gP9Kt31ZmUC8KPayhXzny8L7YqtDGSezG5K6WDUfZl"}))
        self.textbox.configure(state="disabled")
      
    def refresh_exploit(self):
        self.destroy()
        self.master.refresh_exploit()
        
    #  self.right_dashboard   ----> dashboard widget  
